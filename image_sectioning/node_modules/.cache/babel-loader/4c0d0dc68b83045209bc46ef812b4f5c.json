{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chenr\\\\Desktop\\\\11278group28\\\\image_sectioning\\\\src\\\\components\\\\displaytable.js\";\nimport React, { Component } from 'react';\nimport { JsonToTable } from \"react-json-to-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DisplayTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getHeader = function () {\n      var preExistingData = JSON.parse(sessionStorage.getItem('sectionInfo'));\n\n      if (preExistingData[0] != null) {\n        var keys = Object.keys(preExistingData[0]);\n        return keys.map((key, index) => {\n          return /*#__PURE__*/_jsxDEV(\"th\", {\n            children: key\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 16\n          }, this);\n        });\n      } else {\n        return null;\n      }\n    };\n\n    this.getRowsData = function () {\n      var preExistingData = JSON.parse(sessionStorage.getItem('sectionInfo'));\n\n      if (preExistingData[0] != null) {\n        var keys = Object.keys(preExistingData[0]);\n        return preExistingData.map((row, index) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(RenderRow, {\n              data: row,\n              keys: keys\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 36\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                class: \"btn\",\n                id: \"1\",\n                onClick: () => {\n                  getID(this);\n                },\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 18\n          }, this);\n        });\n      } else {\n        return null;\n      }\n    };\n\n    this.getHeader = this.getHeader.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: this.getHeader()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.getRowsData()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst RenderRow = props => {\n  return props.keys.map((key, index) => {\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.data[key]\n    }, props.data[key], false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }, this);\n  });\n};\n\n_c = RenderRow;\n\nfunction getID(element) {\n  if (element == null) {\n    return;\n  } else {\n    console.log(\"row\" + element.parentNode.parentNode.rowIndex + \" - column\" + element.parentNode.cellIndex);\n  }\n}\n\nexport default DisplayTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderRow\");","map":{"version":3,"sources":["C:/Users/chenr/Desktop/11278group28/image_sectioning/src/components/displaytable.js"],"names":["React","Component","JsonToTable","DisplayTable","constructor","props","getHeader","preExistingData","JSON","parse","sessionStorage","getItem","keys","Object","map","key","index","getRowsData","row","getID","bind","render","RenderRow","data","element","console","log","parentNode","rowIndex","cellIndex"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,WAAT,QAA4B,qBAA5B;;;AAEA,MAAMC,YAAN,SAA2BF,SAA3B,CAAqC;AAGnCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAKnBC,SALmB,GAKP,YAAW;AACrB,UAAIC,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,aAAvB,CAAX,CAAtB;;AACA,UAAIJ,eAAe,CAAC,CAAD,CAAf,IAAsB,IAA1B,EAAgC;AAC9B,YAAIK,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYL,eAAe,CAAC,CAAD,CAA3B,CAAX;AACA,eAAOK,IAAI,CAACE,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAc;AAC5B,8BAAO;AAAA,sBAAeD;AAAf,aAASA,GAAT;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SAFM,CAAP;AAGD,OALD,MAKO;AACL,eAAO,IAAP;AACD;AAEF,KAhBkB;;AAAA,SAkBnBE,WAlBmB,GAkBL,YAAW;AACvB,UAAIV,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,aAAvB,CAAX,CAAtB;;AACE,UAAIJ,eAAe,CAAC,CAAD,CAAf,IAAsB,IAA1B,EAAgC;AAC9B,YAAIK,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYL,eAAe,CAAC,CAAD,CAA3B,CAAX;AACA,eAAOA,eAAe,CAACO,GAAhB,CAAoB,CAACI,GAAD,EAAMF,KAAN,KAAe;AACxC,8BAAO;AAAA,oCAAkB,QAAC,SAAD;AAAuB,cAAA,IAAI,EAAEE,GAA7B;AAAkC,cAAA,IAAI,EAAEN;AAAxC,eAAgBI,KAAhB;AAAA;AAAA;AAAA;AAAA,oBAAlB,eACC;AAAA,qCAAI;AAAQ,gBAAA,KAAK,EAAC,KAAd;AAAoB,gBAAA,EAAE,EAAG,GAAzB;AAA6B,gBAAA,OAAO,EAAE,MAAM;AAACG,kBAAAA,KAAK,CAAC,IAAD,CAAL;AAAY,iBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,oBADD;AAAA,aAAWH,KAAX;AAAA;AAAA;AAAA;AAAA,kBAAP;AAGC,SAJI,CAAP;AAKD,OAPD,MAOO;AACL,eAAO,IAAP;AACD;AAEJ,KA/BkB;;AAEjB,SAAKV,SAAL,GAAiB,KAAKA,SAAL,CAAec,IAAf,CAAoB,IAApB,CAAjB;AACD;;AA8BDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE;AAAA,gCACE;AAAA,iCACE;AAAA,sBAAK,KAAKf,SAAL;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA,oBACG,KAAKW,WAAL;AADH;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AAjDkC;;AAoDrC,MAAMK,SAAS,GAAIjB,KAAD,IAAW;AAC3B,SAAOA,KAAK,CAACO,IAAN,CAAWE,GAAX,CAAe,CAACC,GAAD,EAAMC,KAAN,KAAc;AAClC,wBAAO;AAAA,gBAA6BX,KAAK,CAACkB,IAAN,CAAWR,GAAX;AAA7B,OAAWV,KAAK,CAACkB,IAAN,CAAWR,GAAX,CAAX;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,CAAP;AAGD,CAJD;;KAAMO,S;;AAMN,SAASH,KAAT,CAAeK,OAAf,EAAwB;AACtB,MAAIA,OAAO,IAAI,IAAf,EAAqB;AACnB;AACD,GAFD,MAEO;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAASF,OAAO,CAACG,UAAR,CAAmBA,UAAnB,CAA8BC,QAAvC,GAAmD,WAAnD,GAAkEJ,OAAO,CAACG,UAAR,CAAmBE,SAAjG;AACD;AACF;;AAED,eAAe1B,YAAf","sourcesContent":["import React, {Component} from 'react'\r\nimport { JsonToTable } from \"react-json-to-table\";\r\n\r\nclass DisplayTable extends Component {\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.getHeader = this.getHeader.bind(this)\r\n  }\r\n\r\n  getHeader = function() {\r\n    var preExistingData = JSON.parse(sessionStorage.getItem('sectionInfo'))\r\n    if (preExistingData[0] != null) {\r\n      var keys = Object.keys(preExistingData[0])\r\n      return keys.map((key, index)=>{\r\n        return <th key={key}>{key}</th>\r\n      })\r\n    } else {\r\n      return null\r\n    }\r\n    \r\n  }\r\n  \r\n  getRowsData = function() {\r\n    var preExistingData = JSON.parse(sessionStorage.getItem('sectionInfo'))\r\n      if (preExistingData[0] != null) {\r\n        var keys = Object.keys(preExistingData[0]);\r\n        return preExistingData.map((row, index)=> {\r\n          return <tr key = {index}><RenderRow key={index} data={row} keys={keys}/>\r\n                  <td><button class=\"btn\" id = \"1\" onClick={() => {getID(this)}}>Delete</button></td>\r\n                </tr>\r\n          })\r\n      } else {\r\n        return null;\r\n      }\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>{this.getHeader()}</tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.getRowsData()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst RenderRow = (props) => {\r\n  return props.keys.map((key, index)=>{\r\n    return <td key = {props.data[key]}>{props.data[key]}</td>\r\n  })\r\n}\r\n\r\nfunction getID(element) {\r\n  if (element == null) {\r\n    return\r\n  } else {\r\n    console.log(\"row\" + (element.parentNode.parentNode.rowIndex) + \" - column\" + (element.parentNode.cellIndex));\r\n  }\r\n}\r\n\r\nexport default DisplayTable"]},"metadata":{},"sourceType":"module"}