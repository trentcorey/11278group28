{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chenr\\\\Desktop\\\\11278group28\\\\image_sectioning\\\\src\\\\App.js\";\nimport 'react-image-crop/dist/ReactCrop.css';\nimport React, { Component } from 'react';\nimport Cropper from './components/cropper';\nimport UploadFile from './components/uploadFile';\n/*****************************************************SOME NOTES******************************************************/\n// Some clarification: React works on \"renders\". A component is loaded, and does not change unless its state changes.\n// So, if you change any information within a component, if the state DOES NOT CHANGE IT DOES NOT RERENDER. For example,\n// a modification to a header will not be reflected on the website.\n// If you're making modifications to this code and are wondering why I'm doing this in a certain way, hopefully this\n// note explains it. If you find a better way to do something, please add it. (just don't modify my branch in case\n// something breaks).\n// There are several ways to force a rerender. One of the easiest ways, of which I made use of multiple times in my\n// code, is to update a state with a counter. When a button is clicked, usually the function it runs does something\n// like \"state.data++\" to update the state and thus cause a rerendering of the component.\n// Feel free to change object IDs if it makes CSS easier.\n// On that note, a lot of my code is pretty jank since this is my first time using React. But, if it works, it works.\n// Good thing this is just supposed to be a prototype.\n// Happy coding!\n// - Ruo\n\n/***************************************************END OF NOTES******************************************************/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  render() {\n    // Clear session storage when page is reloaded.\n    window.onload = function () {\n      sessionStorage.clear();\n    }; // Displays necessary information and components.\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Cropper, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(UploadFile, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/chenr/Desktop/11278group28/image_sectioning/src/App.js"],"names":["React","Component","Cropper","UploadFile","App","render","window","onload","sessionStorage","clear"],"mappings":";AAAA,OAAO,qCAAP;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AACA;;;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAE1BI,EAAAA,MAAM,GAAG;AACP;AACAC,IAAAA,MAAM,CAACC,MAAP,GAAgB,YAAW;AACzBC,MAAAA,cAAc,CAACC,KAAf;AACD,KAFD,CAFO,CAMP;;;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMD;;AAfyB;;AAkB5B,eAAeL,GAAf","sourcesContent":["import 'react-image-crop/dist/ReactCrop.css';\nimport React, {Component} from 'react';\nimport Cropper from './components/cropper'\nimport UploadFile from './components/uploadFile'\n\n/*****************************************************SOME NOTES******************************************************/\n// Some clarification: React works on \"renders\". A component is loaded, and does not change unless its state changes.\n// So, if you change any information within a component, if the state DOES NOT CHANGE IT DOES NOT RERENDER. For example,\n// a modification to a header will not be reflected on the website.\n\n// If you're making modifications to this code and are wondering why I'm doing this in a certain way, hopefully this\n// note explains it. If you find a better way to do something, please add it. (just don't modify my branch in case\n// something breaks).\n\n// There are several ways to force a rerender. One of the easiest ways, of which I made use of multiple times in my\n// code, is to update a state with a counter. When a button is clicked, usually the function it runs does something\n// like \"state.data++\" to update the state and thus cause a rerendering of the component.\n\n// Feel free to change object IDs if it makes CSS easier.\n\n// On that note, a lot of my code is pretty jank since this is my first time using React. But, if it works, it works.\n// Good thing this is just supposed to be a prototype.\n\n// Happy coding!\n// - Ruo\n/***************************************************END OF NOTES******************************************************/\n\nclass App extends Component {\n\n  render() {\n    // Clear session storage when page is reloaded.\n    window.onload = function() {\n      sessionStorage.clear();\n    }\n\n    // Displays necessary information and components.\n    return (\n        <div className='App'>\n          <Cropper />\n          <UploadFile />     \n        </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}