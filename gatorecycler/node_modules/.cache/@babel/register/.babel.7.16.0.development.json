{
  "{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\chenr\\\\Desktop\\\\11278group28\\\\gatorecycler\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\chenr\\\\Desktop\\\\11278group28\\\\gatorecycler\",\"filename\":\"C:\\\\Users\\\\chenr\\\\Desktop\\\\11278group28\\\\gatorecycler\\\\server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\chenr\\\\Desktop\\\\11278group28\\\\gatorecycler\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "C:\\Users\\chenr\\Desktop\\11278group28\\gatorecycler\\",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\chenr\\Desktop\\11278group28\\gatorecycler",
      "filename": "C:\\Users\\chenr\\Desktop\\11278group28\\gatorecycler\\server.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "C:\\Users\\chenr\\Desktop\\11278group28\\gatorecycler",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\chenr\\Desktop\\11278group28\\gatorecycler\\server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\chenr\\Desktop\\11278group28\\gatorecycler\\server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\chenr\\Desktop\\11278group28\\gatorecycler\\",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "const express = require('express');\n\nconst multer = require('multer');\n\nconst multerS3 = require('multer-s3');\n\nconst fs = require('fs');\n\nconst aws = require('aws-sdk');\n\nconst mysql = require('mysql');\n\nconst spawn = require(\"child_process\").spawn;\n\nconst path = require('path');\n\nconst S3Zipper = require('aws-s3-zipper');\n\nconst app = express();\nconst port = process.env.PORT || 5000;\napp.use(express.json());\napp.use(express.urlencoded());\napp.use(\"/uploads\", express.static(\"uploads\"));\napp.use(function (req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\n  res.header('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS');\n  next();\n});\napp.use(express.static(path.join(__dirname, 'client', 'build')));\nconst s3 = new aws.S3({\n  accessKeyId: '',\n  secretAccessKey: ''\n});\nconst connection = mysql.createConnection({\n  host: 'cen3907database.c2ulacfq2lky.us-east-2.rds.amazonaws.com',\n  user: 'admin',\n  password: 'Mirksu2001',\n  port: '3306',\n  database: 'image_database'\n});\nconnection.connect(function (err) {\n  if (err) {\n    throw err;\n  } else {\n    console.log('Connected to mySQL');\n  }\n});\nconst server = app.listen(port, function () {\n  const port = server.address().port;\n  console.log('Server listening at http://localhost:%s', port);\n}); // Uploading an image to the server\n\nvar storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads');\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\nvar upload = multer({\n  storage: storage\n});\nvar uploadS3 = multer({\n  storage: multerS3({\n    s3: s3,\n    bucket: 'cen3907imagedb',\n    acl: 'public-read',\n    metadata: function (req, file, cb) {\n      cb(null, {\n        fieldName: file.fieldname\n      });\n    },\n    key: function (req, file, cb) {\n      cb(null, Date.now().toString() + '.jpg');\n    }\n  })\n});\napp.post('/detect_image', upload.single('file'), async function (req, res) {\n  console.log(\"Image uploaded for detection...\"); // Calls python script to automatically detect objects in the image\n\n  const python = spawn('python', ['CNN/image_detect.py', req.file.path]);\n  python.on('close', code => {\n    console.log('Finished detection');\n    res.sendFile(__dirname + \"/uploads/result.jpg\");\n  });\n});\napp.post('/upload', uploadS3.single('file'), function (req, res) {\n  const uploaded_to_filepath = req.file.location;\n  console.log(\"Image uploaded!\");\n  console.log(req.file.path);\n  var data_to_post = {\n    Image_Filepath: uploaded_to_filepath\n  }; // Upload image filepath to database\n\n  connection.query(\"INSERT INTO Images SET ?;\", data_to_post, function (err, result) {\n    if (err) throw err;\n    insert_id = result.insertId;\n    console.log(\"ID inserted: \" + insert_id);\n    return res.send({\n      \"image_id\": \"\" + insert_id\n    });\n  });\n});\napp.post('/upload_annotation_results', function (req, res) {\n  var sql = \"INSERT INTO Annotation_Table SET ?;\";\n  console.log(insert_id);\n\n  for (var i = 0; i < req.body.length; i++) {\n    var data_to_post = {\n      ImageID: insert_id,\n      SectionID: req.body[i].SectionID,\n      x_min: req.body[i].x_min,\n      y_min: req.body[i].y_min,\n      x_max: req.body[i].x_max,\n      y_max: req.body[i].y_max,\n      class_id: req.body[i].class_id\n    };\n    connection.query(sql, [data_to_post], function (err, result) {\n      if (err) throw err;\n      console.log(\"Section inserted.\");\n    });\n  }\n});\napp.delete('/delete_result', function (req, res) {\n  console.log(\"Deleting result\");\n  const python = spawn('python', ['python_helpers/delete_result.py']);\n  python.on('close', code => {\n    console.log('Result deleted');\n    res.send(\"Deleted \");\n  });\n});\napp.get('/annotations', function (req, res) {\n  // SQL query\n  var sql = \"SELECT * FROM Annotation_Table INNER JOIN Images ON Annotation_Table.ImageID = Images.ID\";\n  var stream = fs.openSync(__dirname + \"/uploads/annotations.txt\", 'a'); // Tried promise chaining. It didn't work, because I'm not touching recursion, lol.\n  // This solution might be a little unworkable at scale but... this is a prototype, right?\n  // I'll learn promises later.\n\n  connection.query(sql, function (err, result) {\n    if (err) throw err;\n    if (result.length < 0) throw err;\n    var curr = result[0];\n    var curr_ID = curr.ImageID;\n    var imgpath = curr.Image_Filepath;\n    var annotation = curr.x_min + \",\" + curr.x_max + \",\" + curr.x_max + \",\" + curr.x_min + \",\" + curr.class_id + \" \";\n    var imgpath_and_annotations = imgpath + \" \" + annotation;\n\n    for (var i = 1; i < result.length; i++) {\n      console.log(curr_ID);\n      curr = result[i];\n\n      if (curr_ID !== curr.ImageID) {\n        imgpath = curr.Image_Filepath;\n        curr_ID = curr.ImageID;\n        console.log(imgpath_and_annotations);\n        fs.appendFileSync(stream, imgpath_and_annotations);\n        fs.appendFileSync(stream, '\\n');\n        imgpath_and_annotations = imgpath;\n      }\n\n      var annotation = curr.x_min + \",\" + curr.x_max + \",\" + curr.x_max + \",\" + curr.x_min + \",\" + curr.class_id + \" \";\n      var imgpath_and_annotations = imgpath_and_annotations + \" \" + annotation;\n    }\n\n    var filepath = __dirname + \"/uploads/annotations.txt\";\n    res.download(filepath);\n  });\n});\napp.delete(\"/delete_annotation\", function (req, res) {\n  fs.unlinkSync(\"uploads/annotations.txt\");\n  console.log(\"Deleting annotations after download\");\n});\napp.get('/image_zip_download', function (req, res) {\n  console.log(\"Testing\");\n\n  const {\n    exec\n  } = require('child_process');\n\n  exec('aws s3 cp s3://cen3907imagedb/images ./ --recursive');\n  res.send(\"Hello\");\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "require",
        "multer",
        "multerS3",
        "fs",
        "aws",
        "mysql",
        "spawn",
        "path",
        "S3Zipper",
        "app",
        "port",
        "process",
        "env",
        "PORT",
        "use",
        "json",
        "urlencoded",
        "static",
        "req",
        "res",
        "next",
        "header",
        "join",
        "__dirname",
        "s3",
        "S3",
        "accessKeyId",
        "secretAccessKey",
        "connection",
        "createConnection",
        "host",
        "user",
        "password",
        "database",
        "connect",
        "err",
        "console",
        "log",
        "server",
        "listen",
        "address",
        "storage",
        "diskStorage",
        "destination",
        "file",
        "cb",
        "filename",
        "Date",
        "now",
        "originalname",
        "upload",
        "uploadS3",
        "bucket",
        "acl",
        "metadata",
        "fieldName",
        "fieldname",
        "key",
        "toString",
        "post",
        "single",
        "python",
        "on",
        "code",
        "sendFile",
        "uploaded_to_filepath",
        "location",
        "data_to_post",
        "Image_Filepath",
        "query",
        "result",
        "insert_id",
        "insertId",
        "send",
        "sql",
        "i",
        "body",
        "length",
        "ImageID",
        "SectionID",
        "x_min",
        "y_min",
        "x_max",
        "y_max",
        "class_id",
        "delete",
        "get",
        "stream",
        "openSync",
        "curr",
        "curr_ID",
        "imgpath",
        "annotation",
        "imgpath_and_annotations",
        "appendFileSync",
        "filepath",
        "download",
        "unlinkSync",
        "exec"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\chenr\\Desktop\\11278group28\\gatorecycler\\",
      "sourcesContent": [
        "const express = require('express');\r\nconst multer = require('multer');\r\nconst multerS3 = require('multer-s3');\r\nconst fs = require('fs');\r\nconst aws = require('aws-sdk');\r\nconst mysql = require('mysql');\r\nconst spawn = require(\"child_process\").spawn;\r\nconst path = require('path')\r\nconst S3Zipper = require ('aws-s3-zipper')\r\nconst app = express();\r\n\r\nconst port = process.env.PORT || 5000;\r\n\r\n\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded());\r\napp.use(\"/uploads\", express.static(\"uploads\"));\r\napp.use(function(req, res, next) {\r\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\r\n    res.header('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS');\r\n    next();\r\n});\r\n\r\napp.use(express.static(path.join(__dirname, 'client', 'build')));\r\n\r\nconst s3 = new aws.S3({\r\n    accessKeyId: '',\r\n    secretAccessKey: '' \r\n});\r\n\r\nconst connection = mysql.createConnection({\r\n    host        : 'cen3907database.c2ulacfq2lky.us-east-2.rds.amazonaws.com',\r\n    user        : 'admin',\r\n    password    : 'Mirksu2001',\r\n    port        : '3306',\r\n    database    : 'image_database'\r\n});\r\n\r\nconnection.connect(function(err) {\r\n    if (err) {\r\n        throw err\r\n    } else {\r\n        console.log('Connected to mySQL');\r\n    }\r\n});\r\n\r\nconst server = app.listen(port, function () {\r\n    const port = server.address().port;\r\n\r\n    console.log('Server listening at http://localhost:%s', port);\r\n\r\n});\r\n\r\n// Uploading an image to the server\r\nvar storage = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n        cb(null, 'uploads')\r\n    },\r\n    filename: function (req, file, cb) {\r\n        cb(null, Date.now() + '-' + file.originalname)\r\n    }\r\n})\r\n\r\nvar upload = multer({storage: storage});\r\n\r\nvar uploadS3 = multer({\r\n    storage: multerS3({\r\n        s3: s3,\r\n        bucket: 'cen3907imagedb',\r\n        acl: 'public-read',\r\n        metadata: function (req, file, cb) {\r\n            cb(null, {fieldName: file.fieldname});\r\n        },\r\n        key: function (req, file, cb) {\r\n            cb(null, Date.now().toString() + '.jpg')\r\n        }\r\n    })\r\n})\r\n\r\napp.post('/detect_image', upload.single('file'), async function(req, res) {\r\n    console.log(\"Image uploaded for detection...\");\r\n    // Calls python script to automatically detect objects in the image\r\n    const python = spawn('python', ['CNN/image_detect.py', req.file.path]);\r\n    python.on('close', (code) => {\r\n        console.log('Finished detection')\r\n        res.sendFile(__dirname + \"/uploads/result.jpg\")\r\n    });\r\n});\r\n\r\napp.post('/upload', uploadS3.single('file'), function(req, res) {\r\n    const uploaded_to_filepath = req.file.location;\r\n    console.log(\"Image uploaded!\");\r\n    console.log(req.file.path);\r\n\r\n    var data_to_post = {\r\n        Image_Filepath: uploaded_to_filepath\r\n    }\r\n\r\n    // Upload image filepath to database\r\n    connection.query(\"INSERT INTO Images SET ?;\", data_to_post, function(err, result) {\r\n        if (err) throw err;\r\n        insert_id = result.insertId;\r\n        console.log(\"ID inserted: \" + insert_id);\r\n        return res.send({\"image_id\": \"\" + insert_id})\r\n    });\r\n});\r\n\r\napp.post('/upload_annotation_results', function(req, res) {\r\n    \r\n    var sql = \"INSERT INTO Annotation_Table SET ?;\"\r\n    console.log(insert_id);\r\n    for (var i = 0; i < req.body.length; i++) {\r\n        var data_to_post = {\r\n            ImageID: insert_id,\r\n            SectionID: req.body[i].SectionID,\r\n            x_min: req.body[i].x_min,\r\n            y_min: req.body[i].y_min,\r\n            x_max: req.body[i].x_max,\r\n            y_max: req.body[i].y_max,\r\n            class_id: req.body[i].class_id\r\n        }\r\n\r\n        connection.query(sql, [data_to_post], function(err, result) {\r\n            if (err) throw err;\r\n            console.log(\"Section inserted.\")\r\n        })\r\n    }\r\n})\r\n\r\napp.delete('/delete_result', function(req, res) {\r\n    console.log(\"Deleting result\")\r\n    const python = spawn('python', ['python_helpers/delete_result.py']);\r\n\r\n    python.on('close', (code) => {\r\n        console.log('Result deleted')\r\n        res.send(\"Deleted \")\r\n    });\r\n});\r\n\r\napp.get('/annotations', function(req, res) {\r\n    // SQL query\r\n    var sql = \"SELECT * FROM Annotation_Table INNER JOIN Images ON Annotation_Table.ImageID = Images.ID\"\r\n    var stream = fs.openSync(__dirname + \"/uploads/annotations.txt\", 'a')\r\n\r\n    // Tried promise chaining. It didn't work, because I'm not touching recursion, lol.\r\n    // This solution might be a little unworkable at scale but... this is a prototype, right?\r\n    // I'll learn promises later.\r\n\r\n    connection.query(sql, function(err, result) {\r\n        if (err) throw err;\r\n\r\n        if (result.length < 0) throw err;\r\n        var curr = result[0];\r\n        var curr_ID = curr.ImageID;\r\n        var imgpath = curr.Image_Filepath;\r\n        var annotation = curr.x_min + \",\" + curr.x_max + \",\" + curr.x_max + \",\" + curr.x_min + \",\" + curr.class_id + \" \"\r\n        var imgpath_and_annotations = imgpath + \" \" + annotation;\r\n\r\n        for (var i = 1; i < result.length; i++) {\r\n            console.log(curr_ID)\r\n            curr = result[i]\r\n            if (curr_ID !== curr.ImageID) {\r\n                imgpath = curr.Image_Filepath;\r\n                curr_ID = curr.ImageID;\r\n                console.log(imgpath_and_annotations);\r\n                fs.appendFileSync(stream, imgpath_and_annotations);\r\n                fs.appendFileSync(stream, '\\n');\r\n                imgpath_and_annotations = imgpath;\r\n            }\r\n\r\n            var annotation = curr.x_min + \",\" + curr.x_max + \",\" + curr.x_max + \",\" + curr.x_min + \",\" + curr.class_id + \" \"\r\n            var imgpath_and_annotations = imgpath_and_annotations + \" \" + annotation;\r\n        }\r\n        \r\n        var filepath = __dirname + \"/uploads/annotations.txt\";\r\n\r\n        res.download(filepath) \r\n    })\r\n\r\n})\r\n\r\napp.delete(\"/delete_annotation\", function(req, res) {\r\n    fs.unlinkSync(\"uploads/annotations.txt\");\r\n    console.log(\"Deleting annotations after download\")\r\n})\r\n\r\n\r\napp.get('/image_zip_download', function (req, res) {\r\n    console.log(\"Testing\");\r\n    const {exec} = require('child_process')\r\n    exec('aws s3 cp s3://cen3907imagedb/images ./ --recursive')\r\n    res.send(\"Hello\")\r\n})"
      ]
    },
    "sourceType": "module",
    "mtime": 1636983090852
  }
}